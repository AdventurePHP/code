<?php
namespace APF\core\database\mysqli;

/**
 * <!--
 * This file is part of the adventure php framework (APF) published under
 * http://adventure-php-framework.org.
 *
 * The APF is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The APF is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with the APF. If not, see http://www.gnu.org/licenses/lgpl-3.0.txt.
 * -->
 */
use APF\core\database\AbstractDatabaseHandler;
use APF\core\database\DatabaseHandlerException;
use APF\core\logging\LogEntry;

/**
 * @package APF\core\database\mysqli
 * @class MySQLiHandler
 *
 * This class implements a connection handler for the ConnectionManager
 * to use with mysqli extension.
 *
 * @author Christian Achatz
 * @version
 * Version 0.1, 27.02.2008<br />
 */
class MySQLiHandler extends AbstractDatabaseHandler {

   /**
    * @var $dbConn \mysqli
    */
   protected $dbConn = null;

   public function __construct() {
      $this->dbLogTarget = 'mysqli';
      $this->dbPort = '3306';
   }

   public function escapeValue($value) {
      return $this->dbConn->real_escape_string($value);
   }

   public function quoteValue($value) {
      return '\'' . $this->dbConn->real_escape_string($value) . '\'';
   }

   /**
    * @public
    *
    * Turns off autocommit mode! Changes to the database via PDO are not
    * committed until calling commit().
    * rollBack() will roll back all changes and turns on the autocommit mode!
    *
    * @return boolean
    *
    * @author Tobias L체ckel (megger)
    * @version
    * Version 0.1, 11.04.2012<br />
    */
   public function beginTransaction() {
      return $this->dbConn->begin_transaction();
   }

   /**
    * @public
    *
    * Commits a transaction and turns on the autocommit mode!
    *
    * @return boolean
    *
    * @author Tobias L체ckel (megger)
    * @version
    * Version 0.1, 11.04.2012<br />
    */
   public function commit() {
      return $this->dbConn->commit();
   }

   /**
    * @public
    *
    * Rolls back the current transaction
    *
    * @return boolean
    *
    * @author Tobias L체ckel (megger)
    * @version
    * Version 0.1, 11.04.2012<br />
    */
   public function rollback() {
      return $this->dbConn->rollback();
   }

   /**
    * @public
    *
    * Returns the amount of rows, that are affected by a previous update or delete call.
    * @return int An integer greater than zero indicates the number of rows affected or retrieved.
    * Zero indicates that no records where updated for an UPDATE statement,
    * no rows matched the WHERE clause in the query or that no query has yet been executed.
    * -1 indicates that the query returned an error.
    *
    * @param mixed $unusedParam should not be used
    *
    * @return int The number of affected rows.
    *
    * @author Christian Achatz
    * @version
    * Version 0.1, 24.02.2008<br />
    */
   public function getAffectedRows($unusedParam = null) {
      return $this->dbConn->affected_rows;
   }

   public function close() {
      if (!$this->dbConn->close()) {
         throw new DatabaseHandlerException('An error occurred during closing of the '
               . 'database connection (' . $this->dbConn->errno . ': ' . $this->dbConn->error . ')!', E_USER_WARNING);
      }
      $this->dbConn = null;
   }

   /**
    * @public
    *
    * Returns the last insert id generated by auto_increment or trigger.
    *
    * @return int The last insert id.
    *
    * @author Christian Sch채fer
    * @version
    * Version 0.1, 04.01.2006<br />
    */
   public function getLastID() {
      return $this->dbConn->insert_id;
   }

   protected function prepare($statement, array $params, $logStatement) {
      if ($this->dbDebug === true || $logStatement === true) {
         $this->dbLog->logEntry($this->dbLogTarget, '[MySQLiHandler::prepare()] Current statement: ' . $statement, LogEntry::SEVERITY_DEBUG);
      }
      try {
         $preparedStatement = $this->dbConn->prepare($statement);
      } catch (\mysqli_sql_exception $e) {
         throw new DatabaseHandlerException(
               'SQLSTATE[' . $this->dbConn->sqlstate . ']: ' . $e->getMessage() .
               ' (Statement: ' . $statement . ' )',
               $e->getCode(), $e);
      }

      return new MySQLiStatement($preparedStatement, $params);
   }

   protected function execute($statement, $logStatement = false) {
      // log statements in debug mode or when requested explicitly
      if ($this->dbDebug === true || $logStatement === true) {
         $this->dbLog->logEntry($this->dbLogTarget, '[MySQLiHandler::execute()] Current statement: ' . $statement, LogEntry::SEVERITY_DEBUG);
      }

      try {
         // execute the statement with use of the current connection!
         $this->dbConn->real_query($statement);
      } catch (\Exception $e) {
         throw new DatabaseHandlerException(
               'SQLSTATE[' . $this->dbConn->sqlstate . ']: ' .
               $e->getMessage() . ' (Statement: ' . $statement . ')',
               $e->getCode(), $e);
      }

      if ($this->dbConn->field_count) {
         return new MySQLiResult($this->dbConn->store_result());
      }

      return null;
   }

   /**
    *
    */
   protected function connect() {
      // switch error mode of MySQLi to exceptions
      $driver = new \mysqli_driver();
      $driver->report_mode = MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT;
      // initiate connection
      try {
         $this->dbConn = new \mysqli();
         $this->dbConn->real_connect($this->dbHost, $this->dbUser, $this->dbPass, $this->dbName, $this->dbPort, $this->dbSocket);
      } catch (\Exception $e) {
         throw new DatabaseHandlerException($e->getMessage(), $e->getCode(), $e);
      }

      // configure client connection
      if ($this->dbCharset !== null) {
         try {
            $this->dbConn->set_charset($this->dbCharset);
         } catch (\Exception $e) {
            throw new DatabaseHandlerException($e->getMessage(), $e->getCode(), $e);
         }
      }
      // configure client connection
      $this->initCharsetAndCollation();
      if ($this->dbCharset !== null) {
         if (!$this->dbConn->set_charset($this->dbCharset)) {
            throw new DatabaseHandlerException(
                  '[MySQLiHandler->connect()] Error loading character set ' . $this->dbCharset .
                  ' (' . $this->dbConn->error . ')!'
            );
         }
      }
   }
}


